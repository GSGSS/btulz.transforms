package ${GroupId}.${ArtifactId}.${Domain.getName().toLowerCase()}.test.bo;

import junit.framework.TestCase;
import org.colorcoding.ibas.bobas.common.*;
import org.colorcoding.ibas.bobas.repository.*;
import org.colorcoding.ibas.bobas.organization.OrganizationFactory;
import ${GroupId}.${ArtifactId}.${Domain.getName().toLowerCase()}.bo.${BO.getName().toLowerCase()}.*;
import ${GroupId}.${ArtifactId}.${Domain.getName().toLowerCase()}.repository.*;

/**
* ${BO.getDescription()} 测试
* 
*/
public class test${BO.getName()} extends TestCase {
    /**
     * 获取连接口令
    */
    String getToken() {
        return OrganizationFactory.SYSTEM_USER.getToken();
    }
    
    /**
     * 基本项目测试
     * @throws Exception 
    */
    public void testBasicItems() throws Exception {
        ${BO.getName()} ${BO.getName(LowerCamelCase)} = new ${BO.getName()}();
        System.out.println(String.format("new bo: %s", ${BO.getName(LowerCamelCase)}.toString()));
        // 测试属性赋值

$BEGIN_BOITEM$
$BEGIN_BOITEM_RELATION_IS_ONETOMANY$
        // 测试${BOItem.getDescription()}
        I${BOItem.getName()} ${BOItem.getName(LowerCamelCase)} = ${BO.getName(LowerCamelCase)}.get${BOItem.getName()}s().create();
        System.out.println(String.format("new item: %s", ${BOItem.getName(LowerCamelCase)}.toString()));
        // 测试属性赋值
        
$END_BOITEM_RELATION_IS_ONETOMANY$

$BEGIN_BOITEM_RELATION_IS_ONETOONE$
        // 测试${BOItem.getDescription()}
        I${BOItem.getName()} ${BOItem.getName(LowerCamelCase)} = ${BO.getName(LowerCamelCase)}.get${BOItem.getName()}();
        System.out.println(String.format("item: %s", ${BOItem.getName(LowerCamelCase)}.toString()));
        // 测试属性赋值
        
$END_BOITEM_RELATION_IS_ONETOONE$
$END_BOITEM$

        // 测试对象的保存和查询
        IOperationResult<?> operationResult = null;
        ICriteria criteria = null;
        IBORepository${Domain.getName()}App boRepository = new BORepository${Domain.getName()}();
        //设置用户口令
        boRepository.setUserToken(this.getToken());

        // 测试保存
        operationResult = boRepository.save${BO.getName()}(${BO.getName(LowerCamelCase)});
        assertEquals(operationResult.getMessage(), operationResult.getResultCode(), 0);
        ${BO.getName()} boSaved = (${BO.getName()})operationResult.getResultObjects().firstOrDefault();


        // 测试查询
        criteria = boSaved.getCriteria();
        criteria.setResultCount(10);
        operationResult = boRepository.fetch${BO.getName()}(criteria);
        assertEquals(operationResult.getMessage(), operationResult.getResultCode(), 0);


    }

}
